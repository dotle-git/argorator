name: Release

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - custom
      custom_version:
        description: 'Custom version (only used if version_bump is "custom")'
        required: false
        type: string

permissions:
  contents: write
  id-token: write

jobs:
  bump-version-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Configure git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Bump version
        id: bump
        run: |
          if [ "${{ github.event.inputs.version_bump }}" = "custom" ]; then
            if [ -z "${{ github.event.inputs.custom_version }}" ]; then
              echo "Error: Custom version not provided"
              exit 1
            fi
            VERSION_ARG="${{ github.event.inputs.custom_version }}"
          else
            VERSION_ARG="${{ github.event.inputs.version_bump }}"
          fi
          
          # Run the bump script
          python scripts/bump_version.py "$VERSION_ARG"
          
          # Extract the new version
          NEW_VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Commit the changes
          git add pyproject.toml src/argorator/__init__.py
          git commit -m "Bump version to $NEW_VERSION"

      - name: Create and push tag
        run: |
          git tag "v${{ steps.bump.outputs.new_version }}"
          git push origin main
          git push origin "v${{ steps.bump.outputs.new_version }}"

      - name: Build package
        run: |
          python -m pip install --upgrade pip build
          python -m build

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          print-hash: true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.bump.outputs.new_version }}
          name: Release v${{ steps.bump.outputs.new_version }}
          body: |
            ## ðŸš€ Release v${{ steps.bump.outputs.new_version }}
            
            ### Changes
            - Version bump: ${{ github.event.inputs.version_bump }}
            
            ### Installation
            ```bash
            pip install argorator==${{ steps.bump.outputs.new_version }}
            ```
            
            ### PyPI
            https://pypi.org/project/argorator/${{ steps.bump.outputs.new_version }}/
          draft: false
          prerelease: false
          files: |
            dist/*.whl
            dist/*.tar.gz