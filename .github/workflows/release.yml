name: release

on:
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      custom_version:
        description: 'Custom version (optional, overrides bump_type)'
        required: false
        type: string

permissions:
  contents: write
  id-token: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Configure git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(python3 -c "
          import re
          from pathlib import Path
          content = Path('pyproject.toml').read_text()
          match = re.search(r'^version = \"([^\"]*)\"', content, re.MULTILINE)
          print(match.group(1) if match else 'unknown')
          ")
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Bump version
        id: bump_version
        run: |
          if [[ -n "${{ github.event.inputs.custom_version }}" ]]; then
            python3 bump_version.py patch --version "${{ github.event.inputs.custom_version }}"
            NEW_VERSION="${{ github.event.inputs.custom_version }}"
          else
            python3 bump_version.py ${{ github.event.inputs.bump_type }}
            NEW_VERSION=$(python3 -c "
            import re
            from pathlib import Path
            content = Path('pyproject.toml').read_text()
            match = re.search(r'^version = \"([^\"]*)\"', content, re.MULTILINE)
            print(match.group(1) if match else 'unknown')
            ")
          fi
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Run tests
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pytest
          pytest -q

      - name: Commit version bump
        run: |
          git add pyproject.toml src/argorator/__init__.py
          git commit -m "Bump version to ${{ steps.bump_version.outputs.version }}"

      - name: Create and push tag
        run: |
          git tag "v${{ steps.bump_version.outputs.version }}"
          git push origin main
          git push origin "v${{ steps.bump_version.outputs.version }}"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.bump_version.outputs.version }}
          release_name: Release v${{ steps.bump_version.outputs.version }}
          body: |
            Release v${{ steps.bump_version.outputs.version }}
            
            **Changes:**
            - Version bumped from ${{ steps.current_version.outputs.version }} to ${{ steps.bump_version.outputs.version }}
            
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.current_version.outputs.version }}...v${{ steps.bump_version.outputs.version }}
          draft: false
          prerelease: false